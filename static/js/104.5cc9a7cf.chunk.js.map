{"version":3,"file":"static/js/104.5cc9a7cf.chunk.js","mappings":"kRAGaA,EAAc,SAAH,GAAkB,IAAZC,EAAI,EAAJA,KAGpBC,EAAO,CACTC,OAAQ,CACJC,OAAQ,CACJC,SAAS,GAEbC,KAAM,WACF,MAAmB,iBAAZC,KAAKC,GAAwB,UAAY,SACpD,GAEJC,QAAS,CACLL,OAAQ,CACJC,SAAS,GAEbC,KAAM,WACF,MAAmB,iBAAZC,KAAKC,GAAwB,YAAc,WACtD,GAEJE,QAAS,CACLC,OAAQ,WAAa,OAAOC,EAAAA,EAAAA,IAAWL,KAAKM,OAAO,EAAO,IAI5DC,EAAO,CACTJ,QAAS,CACLC,OAAQ,WAAa,OAAOC,EAAAA,EAAAA,IAAWL,KAAKM,OAAO,EAAO,EAC1DE,YAAa,WAAa,OAAOR,KAAKS,IAAK,GAE/CV,KAAM,WACF,MAAqB,iBAAdC,KAAKS,KAA0B,UAAYT,KAAKU,WAC3D,GAGJ,OACI,+BACI,SAAC,IAAQ,CACLC,KAAK,SACLjB,KAAMA,EACNkB,WAAW,cACXC,OAAQ,IACRC,YAAa,GACbC,YAAa,GACbpB,KAAOA,EACPY,KAAOA,EACPS,UAAW,SAI3B,E,oBChDaC,EAAgB,WACzB,IAAeC,GAAoBC,EAAAA,EAAAA,MAA3BC,MACOC,EAA8BH,EAArCI,MACUC,GAD2BL,EAAbM,UAC0B,CAAC,GAAnDC,SACR,GAGKC,EAAAA,EAAAA,MAAe,sBAFhBC,iBAAgB,IAAIC,QAASC,OAAiB,MAAG,GAAE,MAAEC,OAAQC,OAAgB,MAAG,GAAE,EACzEC,EAAiB,EAA1BC,QAGJ,GAAIf,EAAgBe,SAAWD,EAC3B,OAAO,SAACE,EAAA,EAAgB,IAG5B,IAAMC,EAAqBJ,EAAiBK,QAAO,SAACC,EAAKZ,GACrD,IAAIa,EAASD,EAOb,OANId,EAAwBE,KACxBa,GAAM,kBACCD,GAAG,cACLZ,EAAWF,EAAwBE,GAAUc,KAAI,SAAAC,GAAE,OAAInB,EAAgBmB,EAAG,OAG5EF,CACP,GACJ,CAAC,GAEKG,EAAsBZ,EAAkBO,QAAO,SAACC,EAAKZ,GACvD,IAAIa,EAASD,EAOb,OANId,EAAwBE,KACxBa,GAAM,kBACCD,GAAG,cACLZ,EAAWF,EAAwBE,GAAUc,KAAI,SAAAC,GAAE,OAAInB,EAAgBmB,EAAG,OAG5EF,CACP,GACJ,CAAC,GAEKI,EAAa,GAqBnB,OApBAC,OAAOC,QAAQT,GAAoBU,SAAQ,YAA+B,IAAD,eAA5BpB,EAAQ,KAAEqB,EAAY,KAC/DJ,EAAWK,KAAK,CACZC,KAAMvB,EACNxB,GAAI,eACJgD,OAAQH,EAAaV,QAAO,SAACC,EAAKa,GAAC,OAAKC,KAAKC,MAAMf,EAAMa,EAAEG,OAAO,GAAE,IAE5E,IAEAV,OAAOC,QAAQH,GAAqBI,SAAQ,YAA+B,IAAD,eAA5BpB,EAAQ,KAAEqB,EAAY,KAChEJ,EAAWK,KAAK,CACZC,KAAM,eACN/C,GAAIwB,EACJwB,OAAQH,EAAaV,QAAO,SAACC,EAAKa,GAAO,IAAD,EAGpC,OAFgBC,KAAKC,MAAMf,EAAMa,EAAEG,UACJ,QAAZ,EAAAH,EAAEI,kBAAU,aAAZ,EAAcC,QAAS,EAE9C,GAAG,IAEX,KAEO,SAAC9D,EAAW,CAACC,KAAOgD,GAC/B,EAEA,G","sources":["components/SankeyGraph.jsx","pages/ExpenseReport.jsx"],"sourcesContent":["import AnyChart from 'anychart-react'\nimport { printMoney } from '../utils';\n\nexport const SankeyGraph = ({ data }) => {\n    // TODO: Maybe some of these would be better coming from the consumer, if we ever get to\n    // multiple Sankey graphs.\n    const flow = {\n        normal: {\n            labels: {\n                enabled: false\n            },\n            fill: function() {\n                return this.to === \"Total Income\" ? \"#2ecc71\" : \"#e74c3c\"\n            }\n        },\n        hovered: {\n            labels: {\n                enabled: false\n            },\n            fill: function() {\n                return this.to === \"Total Income\" ? \"#2ecc71aa\" : \"#e74c3caa\"\n            }\n        },\n        tooltip: {\n            format: function() { return printMoney(this.value, false) }\n        }\n    };\n\n    const node = {\n        tooltip: {\n            format: function() { return printMoney(this.value, false) },\n            titleFormat: function() { return this.name },\n        },\n        fill: function() {\n            return this.name === \"Total Income\" ? \"#2e9a5b\" : this.sourceColor\n        }\n    }\n\n    return (\n        <>\n            <AnyChart\n                type=\"sankey\"\n                data={data}\n                background=\"transparent\"\n                height={800}\n                curveFactor={0.5}\n                nodePadding={15}\n                flow={ flow }\n                node={ node }\n                nodeWidth={\"20%\"}\n            />\n        </>\n    )\n};\n","import { LoadingIndicator } from '../components/LoadingIndicator';\nimport { SankeyGraph } from '../components/SankeyGraph';\nimport { useCategories } from '../providers/CategoriesProvider';\nimport { useTransactions } from '../providers/TransactionsProvider';\n\nexport const ExpenseReport = () => {\n    const { state: transactionData } = useTransactions();\n    const { items: allTransactions, grouping } = transactionData;\n    const { category: transactionsByCatgories } = grouping || {};\n    const [{\n        categoriesByType: { expense: expenseCategories = [], income: incomeCategories = [] },\n        loading: categoriesLoading,\n    }] = useCategories();\n\n    if (transactionData.loading || categoriesLoading) {\n        return <LoadingIndicator />;\n    }\n\n    const incomeTransactions = incomeCategories.reduce((acc, category) => {\n        let result = acc;\n        if (transactionsByCatgories[category]) {\n            result = {\n                ...acc,\n                [category]: transactionsByCatgories[category].map(id => allTransactions[id])\n            }\n        }\n        return result\n        },\n    {});\n\n    const expenseTransactions = expenseCategories.reduce((acc, category) => {\n        let result = acc;\n        if (transactionsByCatgories[category]) {\n            result = {\n                ...acc,\n                [category]: transactionsByCatgories[category].map(id => allTransactions[id])\n            }\n        }\n        return result\n        },\n    {});\n\n    const sankeyData = [];\n    Object.entries(incomeTransactions).forEach(([category, transactions]) => {\n        sankeyData.push({\n            from: category,\n            to: \"Total Income\",\n            weight: transactions.reduce((acc, t) => Math.round(acc + t.amount), 0)\n        });\n    })\n\n    Object.entries(expenseTransactions).forEach(([category, transactions]) => {\n        sankeyData.push({\n            from: \"Total Income\",\n            to: category,\n            weight: transactions.reduce((acc, t) => {\n                const expense = Math.round(acc + t.amount);\n                const copayments = t.copayments?.total || 0;\n                return expense - copayments;\n            }, 0)\n        });\n    })\n\n    return <SankeyGraph data={ sankeyData }/>\n};\n\nexport default ExpenseReport;\n"],"names":["SankeyGraph","data","flow","normal","labels","enabled","fill","this","to","hovered","tooltip","format","printMoney","value","node","titleFormat","name","sourceColor","type","background","height","curveFactor","nodePadding","nodeWidth","ExpenseReport","transactionData","useTransactions","state","allTransactions","items","transactionsByCatgories","grouping","category","useCategories","categoriesByType","expense","expenseCategories","income","incomeCategories","categoriesLoading","loading","LoadingIndicator","incomeTransactions","reduce","acc","result","map","id","expenseTransactions","sankeyData","Object","entries","forEach","transactions","push","from","weight","t","Math","round","amount","copayments","total"],"sourceRoot":""}