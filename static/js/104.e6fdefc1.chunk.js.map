{"version":3,"file":"static/js/104.e6fdefc1.chunk.js","mappings":"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","sources":["components/SankeyGraph.jsx","pages/ExpenseReport.jsx"],"sourcesContent":["import AnyChart from 'anychart-react'\nimport { printMoney } from '../utils';\n\nexport const SankeyGraph = ({ data }) => {\n    // TODO: Maybe some of these would be better coming from the consumer, if we ever get to\n    // multiple Sankey graphs.\n    const flow = {\n        normal: {\n            labels: {\n                enabled: false\n            },\n            fill: function() {\n                if (this.from === \"DEFICIT\") {\n                    return \"#384660\";\n                }\n\n                if (this.to === \"Total Income\") {\n                    return \"#3498db\";\n                }\n\n                return \"#e74c3c\"\n            }\n        },\n        hovered: {\n            labels: {\n                enabled: false\n            },\n            fill: function() {\n                if (this.from === \"DEFICIT\") {\n                    return \"#384660aa\";\n                }\n\n                if (this.to === \"Total Income\") {\n                    return \"#3498dbaa\";\n                }\n\n                return \"#e74c3caa\"\n            },\n        },\n        tooltip: {\n            format: function() { return printMoney(this.value, false) }\n        }\n    };\n\n    const node = {\n        tooltip: {\n            format: function() { return printMoney(this.value, false) },\n            titleFormat: function() { return this.name },\n        },\n        fill: function() {\n            if (this.name === \"Total Income\") {\n                return \"#2e9a5b\";\n            }\n\n            if (this.name === \"DEFICIT\") {\n                // return \"#95a5a6\"\n                return \"#7f8c8d\"\n            }\n\n            return this.sourceColor;\n        }\n    }\n\n    const dropoff = {\n        normal: {\n            fill: \"#2ecc71\"\n        },\n        hovered: {\n            fill: \"#2ecc71aa\"\n        },\n        tooltip: {\n            format: function() { return printMoney(this.value, false) },\n            titleFormat: \"Leftovers\",\n        },\n    }\n\n    return (\n        <>\n            <AnyChart\n                type=\"sankey\"\n                data={data}\n                background=\"transparent\"\n                height={800}\n                curveFactor={0.5}\n                nodePadding={15}\n                flow={ flow }\n                node={ node }\n                dropoff={ dropoff }\n                nodeWidth={\"20%\"}\n            />\n        </>\n    )\n};\n","import { LoadingIndicator } from '../components/LoadingIndicator';\nimport { SankeyGraph } from '../components/SankeyGraph';\nimport { useCategories } from '../providers/CategoriesProvider';\nimport { useTransactions } from '../providers/TransactionsProvider';\n\nexport const ExpenseReport = () => {\n    const { state: transactionData } = useTransactions();\n    const { items: allTransactions, grouping } = transactionData;\n    const { category: transactionsByCatgories } = grouping || {};\n    const [{\n        categoriesByType: { expense: expenseCategories = [], income: incomeCategories = [] },\n        loading: categoriesLoading,\n    }] = useCategories();\n\n    if (transactionData.loading || categoriesLoading) {\n        return <LoadingIndicator />;\n    }\n\n    const incomeTransactions = incomeCategories.reduce((acc, category) => {\n        let result = acc;\n        if (transactionsByCatgories[category]) {\n            result = {\n                ...acc,\n                [category]: transactionsByCatgories[category].map(id => allTransactions[id])\n            }\n        }\n        return result\n        },\n    {});\n\n    const expenseTransactions = expenseCategories.reduce((acc, category) => {\n        let result = acc;\n        if (transactionsByCatgories[category]) {\n            result = {\n                ...acc,\n                [category]: transactionsByCatgories[category].map(id => allTransactions[id])\n            }\n        }\n        return result\n        },\n    {});\n\n    let totalIncome = 0;\n    const sankeyData = [];\n    Object.entries(incomeTransactions).forEach(([category, transactions]) => {\n        const categoryAmount = transactions.reduce((acc, t) => Math.round(acc + t.amount), 0);\n        totalIncome += categoryAmount;\n        sankeyData.push({\n            from: category,\n            to: \"Total Income\",\n            weight: categoryAmount\n        });\n    })\n\n    let totalExpenses = 0;\n    Object.entries(expenseTransactions).forEach(([category, transactions]) => {\n        const categoryAmount = transactions.reduce((acc, t) => {\n            const expense = Math.round(acc + t.amount);\n            const copayments = t.copayments?.total || 0;\n            return expense - copayments;\n        }, 0);\n        totalExpenses += categoryAmount;\n        sankeyData.push({\n            from: \"Total Income\",\n            to: category,\n            weight: categoryAmount\n        });\n    })\n\n    const leftoversOrDeficit = totalIncome - totalExpenses;\n    if (leftoversOrDeficit > 0) {\n        sankeyData.push({\n            from: \"Total Income\",\n            to: null,\n            weight: leftoversOrDeficit\n        })\n    }\n\n    if (leftoversOrDeficit < 0) {\n        sankeyData.push({\n            from: \"DEFICIT\",\n            to: \"Total Income\",\n            weight: leftoversOrDeficit * -1\n        })\n    }\n\n    return <SankeyGraph data={ sankeyData }/>\n};\n\nexport default ExpenseReport;\n"],"names":["SankeyGraph","data","flow","normal","labels","enabled","fill","this","from","to","hovered","tooltip","format","printMoney","value","node","titleFormat","name","sourceColor","dropoff","type","background","height","curveFactor","nodePadding","nodeWidth","ExpenseReport","transactionData","useTransactions","state","allTransactions","items","transactionsByCatgories","grouping","category","useCategories","categoriesByType","expense","expenseCategories","income","incomeCategories","categoriesLoading","loading","LoadingIndicator","incomeTransactions","reduce","acc","result","map","id","expenseTransactions","totalIncome","sankeyData","Object","entries","forEach","categoryAmount","t","Math","round","amount","push","weight","totalExpenses","copayments","total","leftoversOrDeficit"],"sourceRoot":""}